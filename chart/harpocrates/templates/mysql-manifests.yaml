---
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Release.Name }}-mysql-secret
  labels:
    app.kubernetes.io/name: "{{ .Release.Name }}"
    app.kubernetes.io/component: harpocrates-mysql
type: Opaque
stringData:
  db-user: "{{ .Values.db.harpocratesUser }}"
data:
  root-password: "{{ .Values.db.rootPassword }}"
  db-password: "{{ .Values.db.harpocratesPassword }}"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-config
data:
  create_db.sql: |
    CREATE DATABASE IF NOT EXISTS keychaindb CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
    CREATE DATABASE IF NOT EXISTS ldardb CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
    CREATE DATABASE IF NOT EXISTS keychainanalyticsdb CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
    CREATE DATABASE IF NOT EXISTS dpiadb CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;

    GRANT ALL ON *.* TO '{{ .Values.db.harpocratesUser }}';
---
apiVersion: apps/v1beta2
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}-mysql
  labels: &MySQLDeploymentLabels
    app.kubernetes.io/name: "{{ .Release.Name }}"
    app.kubernetes.io/component: harpocrates-mysql
spec:
  replicas: 1
  selector:
    matchLabels: *MySQLDeploymentLabels
  serviceName: {{ .Release.Name }}-mysql-svc
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels: *MySQLDeploymentLabels
    spec:
      containers:
      - image: {{ .Values.db.image }}
        name: mysql
        env:
        # A password for root superuser.
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-mysql-secret
              key: root-password
        # A database name to be created at startup.
        - name: MYSQL_DATABASE
          value: cerberusdb
        # A new user to be created at startup.
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-mysql-secret
              key: db-user
        # A password of the new user created at startup.
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-mysql-secret
              key: db-password
        ports:
        - name: mysql
          containerPort: 3306
        volumeMounts:
        - name: {{ .Release.Name }}-mysql-pvc
          mountPath: /var/lib/mysql
          subPath: data
        - name: mysql-config-volume
          mountPath: /docker-entrypoint-initdb.d/create_db.sql
          subPath: create_db.sql
      volumes:
        - name: mysql-config-volume
          configMap:
            name: mysql-config
  volumeClaimTemplates:
  - metadata:
      name: {{ .Release.Name }}-mysql-pvc
      labels:
        app.kubernetes.io/name: "{{ .Release.Name }}"
        app.kubernetes.io/component: sql-server
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: standard
      resources:
        requests:
          storage: "{{ .Values.db.storageVolumeSize }}"
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-mysql-svc
  labels:
    app.kubernetes.io/name: "{{ .Release.Name }}"
    app.kubernetes.io/component: harpocrates-mysql
spec:
  ports:
  - name: mysql
    port: 3306
  selector:
    app.kubernetes.io/name: "{{ .Release.Name }}"
    app.kubernetes.io/component: harpocrates-mysql
  clusterIP: None
---